name: CI gated (tests → staging → manual → prod)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

# Prevent overlapping deploys if multiple commits land quickly
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

# Global knobs; override per-job/step if needed
env:
  HEALTH_PATH: /health          # change if your health route differs
  SMOKE_INTERVAL: 5             # seconds between checks
  GRACE_SECONDS: 45             # seconds to wait after hook before first probe
  SMOKE_MAX_WAIT_STAGING: 420   # 7m for staging
  SMOKE_MAX_WAIT_PROD: 900      # 15m for prod

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run test:ci

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # MUST match your GitHub Environment name exactly
    environment: Staging

    steps:
      - name: Deploy to Render (Staging)
        # Staging env secret
        run: curl -fsSL -X POST "${{ secrets.DEPLOY_HOOK_URL }}"

      - name: Grace period before health checks (Staging)
        run: sleep ${{ env.GRACE_SECONDS }}

      - name: Wait for /health to be 200 (Staging)
        shell: bash
        env:
          APP_BASE_URL:   ${{ secrets.APP_BASE_URL }} # Staging env secret
          HEALTH_PATH:    ${{ env.HEALTH_PATH }}
          MAX_WAIT:       ${{ env.SMOKE_MAX_WAIT_STAGING }}
          INTERVAL:       ${{ env.SMOKE_INTERVAL }}
        run: |
          if [ -z "$APP_BASE_URL" ]; then
            echo "APP_BASE_URL (Staging) is empty. Set it to your Render URL, e.g. https://<app>.onrender.com"
            exit 1
          fi

          URL="${APP_BASE_URL%/}${HEALTH_PATH}"
          echo "Probing Staging health endpoint"

          end=$(( SECONDS + MAX_WAIT ))
          while [ $SECONDS -lt $end ]; do
            code=$(curl -s -L \
                      --connect-timeout 5 --max-time 10 \
                      -o /dev/null -w "%{http_code}" \
                      "${URL}?ts=$(date +%s)" || true)
            echo "HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Staging healthy ✅"
              exit 0
            fi
            sleep "$INTERVAL"
          done

          echo "❌ Staging health check failed after ${MAX_WAIT}s"
          exit 1

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 25
    # MUST match your GitHub Environment name exactly (approval gate lives here)
    environment: Prod

    steps:
      - name: Deploy to Render (Prod)
        # Prod env secret
        run: curl -fsSL -X POST "${{ secrets.DEPLOY_HOOK_URL }}"

      - name: Grace period before health checks (Prod)
        run: sleep ${{ env.GRACE_SECONDS }}

      - name: Wait for /health to be 200 (Prod)
        shell: bash
        env:
          APP_BASE_URL:   ${{ secrets.APP_BASE_URL }} # Prod env secret
          HEALTH_PATH:    ${{ env.HEALTH_PATH }}
          MAX_WAIT:       ${{ env.SMOKE_MAX_WAIT_PROD }}
          INTERVAL:       ${{ env.SMOKE_INTERVAL }}
        run: |
          if [ -z "$APP_BASE_URL" ]; then
            echo "APP_BASE_URL (Prod) is empty."
            exit 1
          fi

          URL="${APP_BASE_URL%/}${HEALTH_PATH}"
          echo "Probing Prod health endpoint"

          end=$(( SECONDS + MAX_WAIT ))
          while [ $SECONDS -lt $end ]; do
            code=$(curl -s -L \
                      --connect-timeout 5 --max-time 10 \
                      -o /dev/null -w "%{http_code}" \
                      "${URL}?ts=$(date +%s)" || true)
            echo "HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Prod healthy ✅"
              exit 0
            fi
            sleep "$INTERVAL"
          done

          echo "❌ Prod health check failed after ${MAX_WAIT}s"
          exit 1
