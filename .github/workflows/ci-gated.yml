name: CI gated (tests → staging → manual → prod)

on:
  push:
    branches: [ main ]
    paths:
      - 'client/**'
      - 'src/**'
      - 'server/**'
      - 'api/**'
      - '.github/workflows/ci-gated.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  HEALTH_PATH: /health
  SMOKE_INTERVAL: 5
  GRACE_SECONDS: 45
  SMOKE_MAX_WAIT_STAGING: 420
  SMOKE_MAX_WAIT_PROD: 900

jobs:
  test-client:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json
      - name: Install deps (client)
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No client/package.json found; skipping"
          fi
      - name: Run client tests (if configured)
        run: |
          if [ ! -f package.json ]; then
            echo "No client app; skipping tests"
            exit 0
          fi
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          elif npm run | grep -q "test"; then
            npm test -- --ci || true
          else
            echo "No client tests configured; skipping"
          fi

  test-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Detect backend app
        id: detect
        run: |
          # Common locations for Express app entry expected by tests ('../src/app')
          if [ -f src/app.js ] || [ -f src/app.ts ]; then
            echo "dir=." >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          elif [ -d server ]; then
            echo "dir=server" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          elif [ -d api ]; then
            echo "dir=api" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Install deps (backend)
        if: steps.detect.outputs.exists == 'true'
        run: npm ci
      - name: Run backend tests
        if: steps.detect.outputs.exists == 'true'
        run: |
          # If you have test:ci, use it; otherwise try jest/vitest; otherwise skip
          if npm run | grep -q "test:ci"; then
            npm run test:ci
          elif npm run | grep -q "test"; then
            npm test -- --ci
          else
            echo "No backend tests configured; skipping"
          fi
      - name: No backend detected – skip tests
        if: steps.detect.outputs.exists != 'true'
        run: echo "No backend (src/app) found; skipping backend tests ✅"

  deploy-staging:
    needs: [test-client, test-backend]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: Staging
    steps:
      - name: Deploy to Render (Staging)
        run: curl -fsSL -X POST "${{ secrets.DEPLOY_HOOK_URL }}"
      - name: Grace period before health checks (Staging)
        run: sleep ${{ env.GRACE_SECONDS }}
      - name: Wait for /health to be 200 (Staging)
        shell: bash
        env:
          APP_BASE_URL:   ${{ secrets.APP_BASE_URL }}
          HEALTH_PATH:    ${{ env.HEALTH_PATH }}
          MAX_WAIT:       ${{ env.SMOKE_MAX_WAIT_STAGING }}
          INTERVAL:       ${{ env.SMOKE_INTERVAL }}
        run: |
          if [ -z "$APP_BASE_URL" ]; then
            echo "APP_BASE_URL (Staging) is empty. Set it to your Render URL"
            exit 1
          fi
          URL="${APP_BASE_URL%/}${HEALTH_PATH}"
          echo "Probing Staging health endpoint: $URL"
          end=$(( SECONDS + MAX_WAIT ))
          while [ $SECONDS -lt $end ]; do
            code=$(curl -s -L --connect-timeout 5 --max-time 10 -o /dev/null -w "%{http_code}" "${URL}?ts=$(date +%s)" || true)
            echo "HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Staging healthy ✅"
              exit 0
            fi
            sleep "$INTERVAL"
          done
          echo "❌ Staging health check failed after ${MAX_WAIT}s"
          exit 1

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 25
    environment: Prod
    steps:
      - name: Deploy to Render (Prod)
        run: curl -fsSL -X POST "${{ secrets.DEPLOY_HOOK_URL }}"
      - name: Grace period before health checks (Prod)
        run: sleep ${{ env.GRACE_SECONDS }}
      - name: Wait for /health to be 200 (Prod)
        shell: bash
        env:
          APP_BASE_URL:   ${{ secrets.APP_BASE_URL }}
          HEALTH_PATH:    ${{ env.HEALTH_PATH }}
          MAX_WAIT:       ${{ env.SMOKE_MAX_WAIT_PROD }}
          INTERVAL:       ${{ env.SMOKE_INTERVAL }}
        run: |
          if [ -z "$APP_BASE_URL" ]; then
            echo "APP_BASE_URL (Prod) is empty."
            exit 1
          fi
          URL="${APP_BASE_URL%/}${HEALTH_PATH}"
          echo "Probing Prod health endpoint: $URL"
          end=$(( SECONDS + MAX_WAIT ))
          while [ $SECONDS -lt $end ]; do
            code=$(curl -s -L --connect-timeout 5 --max-time 10 -o /dev/null -w "%{http_code}" "${URL}?ts=$(date +%s)" || true)
            echo "HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Prod healthy ✅"
              exit 0
            fi
            sleep "$INTERVAL"
          done
          echo "❌ Prod health check failed after ${MAX_WAIT}s"
          exit 1
